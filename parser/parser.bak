package parser

import (
	"epha/pkg/dsl/ast"
	"epha/pkg/dsl/lexer"
	"epha/pkg/dsl/token"
	"fmt"
)

type Parser struct {
    l         *lexer.Lexer
    errors    []string
    curToken  token.Token
    peekToken token.Token
}

const LOWEST int = 0

func New(l *lexer.Lexer) *Parser {
    p := &Parser{l: l}
    // Read two tokens, so curToken and peekToken are both set
    p.nextToken()
    p.nextToken()
    return p
}

func (p *Parser) nextToken() {
    p.curToken = p.peekToken
    p.peekToken = p.l.NextToken()
}

func (p *Parser) ParseProgram() *ast.Program {
    program := &ast.Program{}
    for p.curToken.Type != token.EOF {
        stmt := p.parseStatement()
        if stmt != nil {
            program.Statements = append(program.Statements, stmt)
        }
        p.nextToken()
    }
    return program
}

func (p *Parser) parseExpression(precedence int) ast.Expression {
    switch p.curToken.Type {
    case token.Identifier:
        return p.parseIdentifier()
    case token.String:
        return p.parseStringLiteral()
    case token.LBrace:
        return p.parseHashLiteral()
    }
    return nil
}

func (p *Parser) parseStatement() ast.Statement {
    switch p.curToken.Type {
    case token.Import:
        return p.parseImportStatement()
    case token.Identifier:
        if p.peekTokenIs(token.Assign) {
            return p.parseVariableDeclaration()
        }
    }
    return nil
}

func (p *Parser) parseVariableDeclaration() *ast.VariableDeclaration {
    stmt := &ast.VariableDeclaration{Token: p.curToken}
    stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}

    if !p.expectPeek(token.Assign) {
        return nil
    }

    // Parse the expression on the right side of the assignment
    p.nextToken()
    stmt.Value = p.parseExpression(LOWEST)
    return stmt
}
func (p *Parser) parseImportStatement() *ast.ImportStatement {
    stmt := &ast.ImportStatement{
        Token: p.curToken,
    }

    if !p.expectPeek(token.Identifier) {
        return nil
    }

    stmt.Module = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}

    if p.peekTokenIs(token.From) {
        // This handles "from module import x, y, z" syntax
        p.nextToken() // move past 'from'
        if !p.expectPeek(token.Identifier) {
            return nil
        }

        // Now we should be at the 'import' part
        if !p.expectPeek(token.Import) {
            return nil
        }

        // Now we expect a list of identifiers separated by commas
        stmt.Imports = []*ast.Identifier{}
        for {
            p.nextToken()
            if !p.curTokenIs(token.Identifier) {
                return nil // error handling: expected identifier
            }
            stmt.Imports = append(stmt.Imports, &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal})

            if p.peekTokenIs(token.Comma) {
                p.nextToken() // consume the comma
                continue       // expect another identifier
            }
            break // no more imports listed
        }
    } else if p.peekTokenIs(token.Import) {
        // This handles "import x as y" syntax
        p.nextToken() // move past 'import'

        if !p.expectPeek(token.Identifier) {
            return nil
        }

        stmt.Imports = []*ast.Identifier{&ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}}

        if p.peekTokenIs(token.As) {
            p.nextToken() // move past 'as'
            if !p.expectPeek(token.Identifier) {
                return nil
            }
            stmt.Alias = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}
        }
    }

    return stmt
}

func (p *Parser) curTokenIs(t token.TokenType) bool {
    return p.curToken.Type == t
}

func (p *Parser) parseAssignmentStatement() *ast.AssignmentStatement {
    stmt := &ast.AssignmentStatement{Token: p.curToken}
    stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}

    p.nextToken() // skip the identifier
    p.nextToken() // skip the '='

    stmt.Value = p.parseExpression(LOWEST)

    return stmt
}


func (p *Parser) parseIdentifier() *ast.Identifier {
    return &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}
}

func (p *Parser) parseStringLiteral() *ast.StringLiteral {
    return &ast.StringLiteral{Token: p.curToken, Value: p.curToken.Literal}
}

func (p *Parser) parseHashLiteral() *ast.HashLiteral {
    hash := &ast.HashLiteral{Pairs: make(map[ast.Expression]ast.Expression)}

    for !p.peekTokenIs(token.RBrace) {
        p.nextToken()
        key := p.parseExpression(LOWEST)

        if !p.expectPeek(token.Colon) {
            return nil
        }
        p.nextToken()
        value := p.parseExpression(LOWEST)

        hash.Pairs[key] = value

        if !p.peekTokenIs(token.RBrace) && !p.expectPeek(token.Comma) {
            return nil
        }
    }

    if !p.expectPeek(token.RBrace) {
        return nil
    }

    return hash
}

func (p *Parser) peekTokenIs(t token.TokenType) bool {
    return p.peekToken.Type == t
}

func (p *Parser) expectPeek(t token.TokenType) bool {
    if p.peekTokenIs(t) {
        p.nextToken()
        return true
    } else {
        p.peekError(t)
        return false
    }
}

func (p *Parser) peekError(t token.TokenType) {
    msg := fmt.Sprintf("expected next token to be %s, got %s instead", t, p.peekToken.Type)
    p.errors = append(p.errors, msg)
}